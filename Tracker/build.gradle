import groovy.swing.SwingBuilder

apply plugin: 'android'

def keystore = System.getenv('ANDROID_KEYSTORE')

if (keystore == null || keystore.isEmpty()) {
    keystore = 'icon.svg' // allows the build to run on Android Studio.
                          // It won't, however, be able to build the release version from there.
                          // To build the release (signed) version, set ANDROID_KEYSTORE and
                          // ANDROID_KEYALIAS environment variables and run gradle build from a
                          // console
}

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
        versionCode 7
        versionName '1.3.1'
        applicationId 'me.acristoffers.tracker'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlign true
        }
    }

    signingConfigs {
        release {
            storeFile file(keystore)
            keyAlias System.getenv('ANDROID_KEYALIAS')
            storePassword ''
            keyPassword ''
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
    }

    dexOptions {
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:20.+'
    compile 'com.google.apis:google-api-services-analytics:v3+'
}

gradle.taskGraph.whenReady { taskGraph ->

    if (taskGraph.hasTask(':Tracker:assembleRelease')) {
        def pass = ''

        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox {
                        label(text: "Please enter key passphrase:")
                        input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            pass = input.password;
                            dispose();
                        })
                    }
                }
            }
        } else {
            pass = System.console().readPassword("\nPlease enter key passphrase: ")
        }

        pass = new String(pass)

        if (pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }

        android.signingConfigs.release.storePassword = pass
        android.signingConfigs.release.keyPassword = pass
    }

}
